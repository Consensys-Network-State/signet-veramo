diff --git a/node_modules/eip-712-types-generation/dist/getEthTypesFromInputDoc.js b/node_modules/eip-712-types-generation/dist/getEthTypesFromInputDoc.js
index 4a13f9a..90d8f52 100644
--- a/node_modules/eip-712-types-generation/dist/getEthTypesFromInputDoc.js
+++ b/node_modules/eip-712-types-generation/dist/getEthTypesFromInputDoc.js
# Description: implementing type generation for object types nested inside arrays (assuming uniform object structure)
@@ -77,6 +77,19 @@ function getEthTypesFromInputDocHelper(input, primaryType) {
                         else if (arrayFirstType === "string") {
                             types.push({ name: property, type: "string[]" });
                         }
+                    } else if (arrayFirstType === "object") {
+                      // TODO: fix copy-pasta with the regular object case
+                      // TODO: this assumes that the objects in the array are of uniform type
+                      var recursiveOutput = getEthTypesFromInputDocHelper(val[0], primaryType);
+                      var recursiveTypes = recursiveOutput.get(primaryType);
+                      var propertyType = property.charAt(0).toUpperCase() + property.substring(1);
+                      types.push({ name: property, type: `${propertyType}[]` });
+                      output.set(propertyType, recursiveTypes);
+                      for (var key of recursiveOutput.keys()) {
+                          if (key !== primaryType) {
+                              output.set(key, recursiveOutput.get(key));
+                          }
+                      }
                     }
                     else {
                         throw new Error("Array with elements of unknown type found");
@@ -89,7 +102,7 @@ function getEthTypesFromInputDocHelper(input, primaryType) {
                 var propertyType = property.charAt(0).toUpperCase() + property.substring(1);
                 types.push({ name: property, type: propertyType });
                 output.set(propertyType, recursiveTypes);
-                for (var key in recursiveOutput) {
+                for (var key of recursiveOutput.keys()) {
                     if (key !== primaryType) {
                         output.set(key, recursiveOutput.get(key));
                     }
